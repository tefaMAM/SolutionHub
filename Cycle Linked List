/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public boolean hasCycle(ListNode head) {
       if (head == null) return false; // If the list is empty, there is no cycle.

        ListNode slow = head;
        ListNode fast = head;

        // Start traversing the list
        while (fast != null && fast.next != null) {
            slow = slow.next;         // Move slow by 1 step
            fast = fast.next.next;    // Move fast by 2 steps

            // If slow and fast meet, there's a cycle
            if (slow == fast) {
                return true;
            }
        }
        
        // If we exit the loop, there is no cycle
        return false;
    }
}
